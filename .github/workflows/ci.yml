name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: quiz_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql+psycopg://postgres:postgres@localhost:5432/quiz_test" >> $GITHUB_ENV
        echo "JWT_SECRET=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "ENV=test" >> $GITHUB_ENV

    - name: Run ruff linting
      run: ruff check .

    - name: Run black formatting check
      run: black --check .

    - name: Run mypy type checking
      run: mypy .

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run database migrations
      run: |
        alembic upgrade head

    - name: Run tests with coverage
      run: |
        pytest --cov=app --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload coverage artifact
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  docker-build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ai-quiz-microservice:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm ai-quiz-microservice:latest python -c "import app.main; print('Import successful')"

  integration-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Start services with Docker Compose
      run: |
        cp .env.example .env
        docker compose up -d
        
    - name: Wait for services to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/healthz; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:8000/readyz; do sleep 2; done'

    - name: Run API tests
      run: |
        # Test basic endpoints
        curl -f http://localhost:8000/healthz
        curl -f http://localhost:8000/readyz
        
        # Test authentication
        JWT=$(curl -s -X POST http://localhost:8000/auth/login \
          -H "Content-Type: application/json" \
          -d '{"username":"test","password":"test"}' | jq -r '.access_token')
        
        # Test quiz creation
        curl -f -X POST http://localhost:8000/quizzes \
          -H "Authorization: Bearer $JWT" \
          -H "Content-Type: application/json" \
          -d '{
            "subject": "Test",
            "grade_level": "8",
            "num_questions": 2,
            "difficulty": "easy",
            "topics": ["test"],
            "question_types": ["MCQ"]
          }'

    - name: Show service logs on failure
      if: failure()
      run: |
        docker compose logs

    - name: Stop services
      if: always()
      run: |
        docker compose down -v
