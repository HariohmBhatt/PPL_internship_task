-- AI Quiz Service schema (PostgreSQL)
-- Generated to mirror Alembic revisions 001 and 002
-- Safe to run multiple times due to IF NOT EXISTS usage

BEGIN;

-- Users
CREATE TABLE IF NOT EXISTS users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    hashed_password VARCHAR(255) NOT NULL
);

-- Align with migration-created indexes
CREATE INDEX IF NOT EXISTS ix_users_id ON users(id);
CREATE INDEX IF NOT EXISTS idx_user_username_email ON users(username, email);


-- Quizzes
CREATE TABLE IF NOT EXISTS quizzes (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    title VARCHAR(200) NOT NULL,
    subject VARCHAR(100) NOT NULL,
    grade_level VARCHAR(50) NOT NULL,
    num_questions INTEGER NOT NULL,
    difficulty VARCHAR(50) NOT NULL,
    adaptive BOOLEAN NOT NULL DEFAULT FALSE,
    topics JSON NOT NULL,
    question_types JSON NOT NULL,
    standard VARCHAR(100),
    description TEXT,
    time_limit_minutes INTEGER,
    creator_id INTEGER NOT NULL REFERENCES users(id),
    is_published BOOLEAN NOT NULL DEFAULT FALSE,
    completed_at TIMESTAMPTZ
);

CREATE INDEX IF NOT EXISTS ix_quizzes_id ON quizzes(id);
CREATE INDEX IF NOT EXISTS ix_quizzes_subject ON quizzes(subject);
CREATE INDEX IF NOT EXISTS ix_quizzes_grade_level ON quizzes(grade_level);
CREATE INDEX IF NOT EXISTS idx_quiz_subject_grade ON quizzes(subject, grade_level);
CREATE INDEX IF NOT EXISTS idx_quiz_creator_created ON quizzes(creator_id, created_at);
CREATE INDEX IF NOT EXISTS idx_quiz_difficulty ON quizzes(difficulty);
CREATE INDEX IF NOT EXISTS idx_quiz_published ON quizzes(is_published);


-- Questions
CREATE TABLE IF NOT EXISTS questions (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    question_text TEXT NOT NULL,
    question_type VARCHAR(50) NOT NULL,
    difficulty VARCHAR(50) NOT NULL,
    topic VARCHAR(100) NOT NULL,
    "order" INTEGER NOT NULL,
    points INTEGER NOT NULL DEFAULT 1,
    options JSON,
    correct_answer TEXT,
    explanation TEXT,
    hint_text TEXT,
    quiz_id INTEGER NOT NULL REFERENCES quizzes(id)
);

CREATE INDEX IF NOT EXISTS ix_questions_id ON questions(id);
CREATE INDEX IF NOT EXISTS ix_questions_topic ON questions(topic);
CREATE INDEX IF NOT EXISTS idx_question_quiz_order ON questions(quiz_id, "order");
CREATE INDEX IF NOT EXISTS idx_question_type ON questions(question_type);
CREATE INDEX IF NOT EXISTS idx_question_difficulty ON questions(difficulty);


-- Submissions
CREATE TABLE IF NOT EXISTS submissions (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    user_id INTEGER NOT NULL REFERENCES users(id),
    quiz_id INTEGER NOT NULL REFERENCES quizzes(id),
    is_completed BOOLEAN NOT NULL DEFAULT FALSE,
    submitted_at TIMESTAMPTZ,
    total_score DOUBLE PRECISION,
    max_possible_score DOUBLE PRECISION,
    percentage DOUBLE PRECISION,
    started_at TIMESTAMPTZ NOT NULL,
    time_taken_minutes INTEGER
);

CREATE INDEX IF NOT EXISTS ix_submissions_id ON submissions(id);
CREATE INDEX IF NOT EXISTS idx_submission_user_quiz ON submissions(user_id, quiz_id);
CREATE INDEX IF NOT EXISTS idx_submission_completed ON submissions(is_completed);
CREATE INDEX IF NOT EXISTS idx_submission_submitted_at ON submissions(submitted_at);
CREATE INDEX IF NOT EXISTS idx_submission_user_submitted ON submissions(user_id, submitted_at);


-- Answers
CREATE TABLE IF NOT EXISTS answers (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    submission_id INTEGER NOT NULL REFERENCES submissions(id),
    question_id INTEGER NOT NULL REFERENCES questions(id),
    answer_text TEXT,
    selected_option TEXT,
    is_correct BOOLEAN,
    points_earned DOUBLE PRECISION,
    max_points DOUBLE PRECISION,
    ai_score DOUBLE PRECISION,
    ai_feedback TEXT,
    confidence_score DOUBLE PRECISION,
    hints_used INTEGER NOT NULL DEFAULT 0,
    hint_penalty DOUBLE PRECISION DEFAULT 0.0,
    time_spent_seconds INTEGER
);

CREATE INDEX IF NOT EXISTS ix_answers_id ON answers(id);
CREATE INDEX IF NOT EXISTS idx_answer_submission_question ON answers(submission_id, question_id);
CREATE INDEX IF NOT EXISTS idx_answer_question ON answers(question_id);
CREATE INDEX IF NOT EXISTS idx_answer_is_correct ON answers(is_correct);


-- Evaluations
CREATE TABLE IF NOT EXISTS evaluations (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    submission_id INTEGER NOT NULL REFERENCES submissions(id),
    total_score DOUBLE PRECISION NOT NULL,
    max_possible_score DOUBLE PRECISION NOT NULL,
    percentage DOUBLE PRECISION NOT NULL,
    correct_answers INTEGER NOT NULL,
    total_questions INTEGER NOT NULL,
    mcq_score DOUBLE PRECISION,
    tf_score DOUBLE PRECISION,
    short_answer_score DOUBLE PRECISION,
    essay_score DOUBLE PRECISION,
    easy_score DOUBLE PRECISION,
    medium_score DOUBLE PRECISION,
    hard_score DOUBLE PRECISION,
    topic_scores JSON,
    strengths JSON NOT NULL,
    weaknesses JSON NOT NULL,
    suggestions JSON NOT NULL,
    overall_feedback TEXT,
    improvement_areas TEXT,
    performance_level VARCHAR(50)
);

CREATE INDEX IF NOT EXISTS ix_evaluations_id ON evaluations(id);
CREATE INDEX IF NOT EXISTS idx_evaluation_submission ON evaluations(submission_id);
CREATE INDEX IF NOT EXISTS idx_evaluation_percentage ON evaluations(percentage);
CREATE INDEX IF NOT EXISTS idx_evaluation_performance_level ON evaluations(performance_level);


-- Retries
CREATE TABLE IF NOT EXISTS retries (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    original_quiz_id INTEGER NOT NULL REFERENCES quizzes(id),
    retried_quiz_id INTEGER NOT NULL REFERENCES quizzes(id),
    retry_number INTEGER NOT NULL,
    reason VARCHAR(200)
);

CREATE INDEX IF NOT EXISTS ix_retries_id ON retries(id);
CREATE INDEX IF NOT EXISTS idx_retry_original_quiz ON retries(original_quiz_id);
CREATE INDEX IF NOT EXISTS idx_retry_retried_quiz ON retries(retried_quiz_id);
CREATE INDEX IF NOT EXISTS idx_retry_number ON retries(retry_number);


-- Leaderboard entries (rev 002)
CREATE TABLE IF NOT EXISTS leaderboard_entries (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    user_id INTEGER NOT NULL,
    username VARCHAR(100) NOT NULL,
    subject VARCHAR(100) NOT NULL,
    grade_level VARCHAR(10) NOT NULL,
    best_score DOUBLE PRECISION NOT NULL,
    best_percentage DOUBLE PRECISION NOT NULL,
    total_quizzes INTEGER NOT NULL,
    average_score DOUBLE PRECISION NOT NULL,
    total_questions_answered INTEGER NOT NULL,
    total_correct_answers INTEGER NOT NULL,
    first_quiz_date TIMESTAMP NOT NULL,
    last_quiz_date TIMESTAMP NOT NULL,
    last_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS ix_leaderboard_entries_user_id ON leaderboard_entries(user_id);
CREATE INDEX IF NOT EXISTS ix_leaderboard_entries_subject ON leaderboard_entries(subject);
CREATE INDEX IF NOT EXISTS ix_leaderboard_entries_grade_level ON leaderboard_entries(grade_level);
CREATE INDEX IF NOT EXISTS ix_leaderboard_entries_best_percentage ON leaderboard_entries(best_percentage);
CREATE INDEX IF NOT EXISTS ix_leaderboard_entries_subject_grade ON leaderboard_entries(subject, grade_level);
CREATE UNIQUE INDEX IF NOT EXISTS ix_leaderboard_entries_user_subject_grade
  ON leaderboard_entries(user_id, subject, grade_level);

COMMIT;